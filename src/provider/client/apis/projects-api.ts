/* tslint:disable */
/* eslint-disable */
/**
 * KotiKota
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: latest
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BadRequestException } from '../models';
import { InternalServerException } from '../models';
import { NotAuthorizedException } from '../models';
import { Page } from '../models';
import { PageSize } from '../models';
import { Project } from '../models';
import { ResourceNotFoundException } from '../models';
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create or update projects
     * @param {Array<Project>} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdateProjects: async (body?: Array<Project>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/projects`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function' ? await configuration.accessToken() : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the list of all projects
     * @param {string} [ownerId] Filter projects by ownerId
     * @param {Page} [page]
     * @param {PageSize} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllProjects: async (ownerId?: string, page?: Page, pageSize?: PageSize, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/projects`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (ownerId !== undefined) {
        localVarQueryParameter['ownerId'] = ownerId;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['pageSize'] = pageSize;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a specific project by id
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectById: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      if (projectId === null || projectId === undefined) {
        throw new RequiredError('projectId', 'Required parameter projectId was null or undefined when calling getProjectById.');
      }
      const localVarPath = `/projects/{projectId}`.replace(`{${'projectId'}}`, encodeURIComponent(String(projectId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create or update projects
     * @param {Array<Project>} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async crupdateProjects(
      body?: Array<Project>,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Project>>>> {
      const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).crupdateProjects(body, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get the list of all projects
     * @param {string} [ownerId] Filter projects by ownerId
     * @param {Page} [page]
     * @param {PageSize} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllProjects(
      ownerId?: string,
      page?: Page,
      pageSize?: PageSize,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Project>>>> {
      const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).getAllProjects(ownerId, page, pageSize, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get a specific project by id
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProjectById(
      projectId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Project>>> {
      const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).getProjectById(projectId, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary Create or update projects
     * @param {Array<Project>} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async crupdateProjects(body?: Array<Project>, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Project>>> {
      return ProjectsApiFp(configuration)
        .crupdateProjects(body, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Get the list of all projects
     * @param {string} [ownerId] Filter projects by ownerId
     * @param {Page} [page]
     * @param {PageSize} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllProjects(ownerId?: string, page?: Page, pageSize?: PageSize, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Project>>> {
      return ProjectsApiFp(configuration)
        .getAllProjects(ownerId, page, pageSize, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Get a specific project by id
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProjectById(projectId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Project>> {
      return ProjectsApiFp(configuration)
        .getProjectById(projectId, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
  /**
   *
   * @summary Create or update projects
   * @param {Array<Project>} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApi
   */
  public async crupdateProjects(body?: Array<Project>, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Project>>> {
    return ProjectsApiFp(this.configuration)
      .crupdateProjects(body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get the list of all projects
   * @param {string} [ownerId] Filter projects by ownerId
   * @param {Page} [page]
   * @param {PageSize} [pageSize]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApi
   */
  public async getAllProjects(ownerId?: string, page?: Page, pageSize?: PageSize, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Project>>> {
    return ProjectsApiFp(this.configuration)
      .getAllProjects(ownerId, page, pageSize, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get a specific project by id
   * @param {string} projectId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApi
   */
  public async getProjectById(projectId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Project>> {
    return ProjectsApiFp(this.configuration)
      .getProjectById(projectId, options)
      .then(request => request(this.axios, this.basePath));
  }
}
