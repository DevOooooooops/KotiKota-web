"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * KotiKota
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiAxiosParamCreator = exports.SecurityApi = exports.SecurityApiFactory = exports.SecurityApiFp = exports.SecurityApiAxiosParamCreator = exports.ProjectsApi = exports.ProjectsApiFactory = exports.ProjectsApiFp = exports.ProjectsApiAxiosParamCreator = exports.HealthApi = exports.HealthApiFactory = exports.HealthApiFp = exports.HealthApiAxiosParamCreator = exports.ProjectStatus = exports.ProjectHealth = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 *
 * @export
 * @enum {string}
 */
var ProjectHealth;
(function (ProjectHealth) {
    ProjectHealth["SUCCESS"] = "SUCCESS";
    ProjectHealth["FAILED"] = "FAILED";
    ProjectHealth["IN_PROGRESS"] = "IN_PROGRESS";
})(ProjectHealth = exports.ProjectHealth || (exports.ProjectHealth = {}));
/**
 *
 * @export
 * @enum {string}
 */
var ProjectStatus;
(function (ProjectStatus) {
    ProjectStatus["OPEN"] = "OPEN";
    ProjectStatus["CLOSE"] = "CLOSE";
})(ProjectStatus = exports.ProjectStatus || (exports.ProjectStatus = {}));
/**
 * HealthApi - axios parameter creator
 * @export
 */
exports.HealthApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        greet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/hello`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * HealthApi - functional programming interface
 * @export
 */
exports.HealthApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.HealthApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        greet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.greet(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * HealthApi - factory interface
 * @export
 */
exports.HealthApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.HealthApiFp(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        greet(options) {
            return localVarFp.greet(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
class HealthApi extends base_1.BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    greet(options) {
        return exports.HealthApiFp(this.configuration).greet(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.HealthApi = HealthApi;
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
exports.ProjectsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary comment out a project
         * @param {string} projectId
         * @param {ProjectComment} [projectComment]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentProject: (projectId, projectComment, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'projectId' is not null or undefined
            common_1.assertParamExists('commentProject', 'projectId', projectId);
            const localVarPath = `/projects/{projectId}/comments`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BearerAuth required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(projectComment, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Create or update projects
         * @param {Array<CreateProject>} [createProject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        crupdateProjects: (createProject, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BearerAuth required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createProject, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary donate some money to a project
         * @param {string} projectId
         * @param {Array<CreateProjectDonation>} [createProjectDonation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donate: (projectId, createProjectDonation, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'projectId' is not null or undefined
            common_1.assertParamExists('donate', 'projectId', projectId);
            const localVarPath = `/projects/{projectId}/donations`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BearerAuth required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createProjectDonation, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get the list of all projects
         * @param {string} [ownerId] Filter projects by ownerId
         * @param {string} [name] Filter projects by name
         * @param {ProjectStatus} [status] Filter projects by ProjectStatus
         * @param {ProjectHealth} [health] Filter projects by ProjectHealth
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjects: (ownerId, name, status, health, page, pageSize, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (ownerId !== undefined) {
                localVarQueryParameter['ownerId'] = ownerId;
            }
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (health !== undefined) {
                localVarQueryParameter['health'] = health;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary get all donations made on a project
         * @param {string} projectId
         * @param {string} [source]
         * @param {string} [beginDate]
         * @param {string} [endDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonationsByProjectId: (projectId, source, beginDate, endDate, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'projectId' is not null or undefined
            common_1.assertParamExists('getDonationsByProjectId', 'projectId', projectId);
            const localVarPath = `/projects/{projectId}/donations`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }
            if (beginDate !== undefined) {
                localVarQueryParameter['beginDate'] = (beginDate instanceof Date) ?
                    beginDate.toISOString().substr(0, 10) :
                    beginDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate instanceof Date) ?
                    endDate.toISOString().substr(0, 10) :
                    endDate;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get a specific project by id
         * @param {string} projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectById: (projectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'projectId' is not null or undefined
            common_1.assertParamExists('getProjectById', 'projectId', projectId);
            const localVarPath = `/projects/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary comment out a project
         * @param {string} projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectComments: (projectId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'projectId' is not null or undefined
            common_1.assertParamExists('getProjectComments', 'projectId', projectId);
            const localVarPath = `/projects/{projectId}/comments`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BearerAuth required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ProjectsApi - functional programming interface
 * @export
 */
exports.ProjectsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.ProjectsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary comment out a project
         * @param {string} projectId
         * @param {ProjectComment} [projectComment]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentProject(projectId, projectComment, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.commentProject(projectId, projectComment, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Create or update projects
         * @param {Array<CreateProject>} [createProject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        crupdateProjects(createProject, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.crupdateProjects(createProject, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary donate some money to a project
         * @param {string} projectId
         * @param {Array<CreateProjectDonation>} [createProjectDonation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donate(projectId, createProjectDonation, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.donate(projectId, createProjectDonation, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get the list of all projects
         * @param {string} [ownerId] Filter projects by ownerId
         * @param {string} [name] Filter projects by name
         * @param {ProjectStatus} [status] Filter projects by ProjectStatus
         * @param {ProjectHealth} [health] Filter projects by ProjectHealth
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjects(ownerId, name, status, health, page, pageSize, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAllProjects(ownerId, name, status, health, page, pageSize, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary get all donations made on a project
         * @param {string} projectId
         * @param {string} [source]
         * @param {string} [beginDate]
         * @param {string} [endDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonationsByProjectId(projectId, source, beginDate, endDate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDonationsByProjectId(projectId, source, beginDate, endDate, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get a specific project by id
         * @param {string} projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectById(projectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProjectById(projectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary comment out a project
         * @param {string} projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectComments(projectId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getProjectComments(projectId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * ProjectsApi - factory interface
 * @export
 */
exports.ProjectsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.ProjectsApiFp(configuration);
    return {
        /**
         *
         * @summary comment out a project
         * @param {string} projectId
         * @param {ProjectComment} [projectComment]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentProject(projectId, projectComment, options) {
            return localVarFp.commentProject(projectId, projectComment, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create or update projects
         * @param {Array<CreateProject>} [createProject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        crupdateProjects(createProject, options) {
            return localVarFp.crupdateProjects(createProject, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary donate some money to a project
         * @param {string} projectId
         * @param {Array<CreateProjectDonation>} [createProjectDonation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donate(projectId, createProjectDonation, options) {
            return localVarFp.donate(projectId, createProjectDonation, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get the list of all projects
         * @param {string} [ownerId] Filter projects by ownerId
         * @param {string} [name] Filter projects by name
         * @param {ProjectStatus} [status] Filter projects by ProjectStatus
         * @param {ProjectHealth} [health] Filter projects by ProjectHealth
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjects(ownerId, name, status, health, page, pageSize, options) {
            return localVarFp.getAllProjects(ownerId, name, status, health, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary get all donations made on a project
         * @param {string} projectId
         * @param {string} [source]
         * @param {string} [beginDate]
         * @param {string} [endDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonationsByProjectId(projectId, source, beginDate, endDate, options) {
            return localVarFp.getDonationsByProjectId(projectId, source, beginDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a specific project by id
         * @param {string} projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectById(projectId, options) {
            return localVarFp.getProjectById(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary comment out a project
         * @param {string} projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectComments(projectId, options) {
            return localVarFp.getProjectComments(projectId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
class ProjectsApi extends base_1.BaseAPI {
    /**
     *
     * @summary comment out a project
     * @param {string} projectId
     * @param {ProjectComment} [projectComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    commentProject(projectId, projectComment, options) {
        return exports.ProjectsApiFp(this.configuration).commentProject(projectId, projectComment, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create or update projects
     * @param {Array<CreateProject>} [createProject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    crupdateProjects(createProject, options) {
        return exports.ProjectsApiFp(this.configuration).crupdateProjects(createProject, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary donate some money to a project
     * @param {string} projectId
     * @param {Array<CreateProjectDonation>} [createProjectDonation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    donate(projectId, createProjectDonation, options) {
        return exports.ProjectsApiFp(this.configuration).donate(projectId, createProjectDonation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get the list of all projects
     * @param {string} [ownerId] Filter projects by ownerId
     * @param {string} [name] Filter projects by name
     * @param {ProjectStatus} [status] Filter projects by ProjectStatus
     * @param {ProjectHealth} [health] Filter projects by ProjectHealth
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getAllProjects(ownerId, name, status, health, page, pageSize, options) {
        return exports.ProjectsApiFp(this.configuration).getAllProjects(ownerId, name, status, health, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary get all donations made on a project
     * @param {string} projectId
     * @param {string} [source]
     * @param {string} [beginDate]
     * @param {string} [endDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getDonationsByProjectId(projectId, source, beginDate, endDate, options) {
        return exports.ProjectsApiFp(this.configuration).getDonationsByProjectId(projectId, source, beginDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a specific project by id
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProjectById(projectId, options) {
        return exports.ProjectsApiFp(this.configuration).getProjectById(projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary comment out a project
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProjectComments(projectId, options) {
        return exports.ProjectsApiFp(this.configuration).getProjectComments(projectId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ProjectsApi = ProjectsApi;
/**
 * SecurityApi - axios parameter creator
 * @export
 */
exports.SecurityApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {UsernamePassword} [usernamePassword]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestToken: (usernamePassword, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(usernamePassword, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * tells you who you are
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        whoami: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/whoami`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BearerAuth required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SecurityApi - functional programming interface
 * @export
 */
exports.SecurityApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.SecurityApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {UsernamePassword} [usernamePassword]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestToken(usernamePassword, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.requestToken(usernamePassword, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * tells you who you are
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        whoami(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.whoami(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * SecurityApi - factory interface
 * @export
 */
exports.SecurityApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.SecurityApiFp(configuration);
    return {
        /**
         *
         * @param {UsernamePassword} [usernamePassword]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestToken(usernamePassword, options) {
            return localVarFp.requestToken(usernamePassword, options).then((request) => request(axios, basePath));
        },
        /**
         * tells you who you are
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        whoami(options) {
            return localVarFp.whoami(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
class SecurityApi extends base_1.BaseAPI {
    /**
     *
     * @param {UsernamePassword} [usernamePassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    requestToken(usernamePassword, options) {
        return exports.SecurityApiFp(this.configuration).requestToken(usernamePassword, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * tells you who you are
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    whoami(options) {
        return exports.SecurityApiFp(this.configuration).whoami(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SecurityApi = SecurityApi;
/**
 * UsersApi - axios parameter creator
 * @export
 */
exports.UsersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary CreateUser
         * @param {Array<CreateUser>} [createUser]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: (createUser, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createUser, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary deposit a certain amount to your kotikota account
         * @param {string} userId
         * @param {Money} [money]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposit: (userId, money, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('deposit', 'userId', userId);
            const localVarPath = `/users/{userId}/deposits`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BearerAuth required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(money, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BearerAuth required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary getUserById
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: (userId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('getUserById', 'userId', userId);
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BearerAuth required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary update user profile
         * @param {string} userId
         * @param {UserProfile} [userProfile]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfile: (userId, userProfile, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'userId' is not null or undefined
            common_1.assertParamExists('updateUserProfile', 'userId', userId);
            const localVarPath = `/users/{userId}/profile`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication BearerAuth required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(userProfile, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * UsersApi - functional programming interface
 * @export
 */
exports.UsersApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.UsersApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary CreateUser
         * @param {Array<CreateUser>} [createUser]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(createUser, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createUser(createUser, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary deposit a certain amount to your kotikota account
         * @param {string} userId
         * @param {Money} [money]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposit(userId, money, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deposit(userId, money, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAllUsers(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary getUserById
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(userId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserById(userId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary update user profile
         * @param {string} userId
         * @param {UserProfile} [userProfile]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfile(userId, userProfile, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateUserProfile(userId, userProfile, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * UsersApi - factory interface
 * @export
 */
exports.UsersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.UsersApiFp(configuration);
    return {
        /**
         *
         * @summary CreateUser
         * @param {Array<CreateUser>} [createUser]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(createUser, options) {
            return localVarFp.createUser(createUser, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary deposit a certain amount to your kotikota account
         * @param {string} userId
         * @param {Money} [money]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposit(userId, money, options) {
            return localVarFp.deposit(userId, money, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(options) {
            return localVarFp.getAllUsers(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary getUserById
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(userId, options) {
            return localVarFp.getUserById(userId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary update user profile
         * @param {string} userId
         * @param {UserProfile} [userProfile]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfile(userId, userProfile, options) {
            return localVarFp.updateUserProfile(userId, userProfile, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
class UsersApi extends base_1.BaseAPI {
    /**
     *
     * @summary CreateUser
     * @param {Array<CreateUser>} [createUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createUser(createUser, options) {
        return exports.UsersApiFp(this.configuration).createUser(createUser, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary deposit a certain amount to your kotikota account
     * @param {string} userId
     * @param {Money} [money]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deposit(userId, money, options) {
        return exports.UsersApiFp(this.configuration).deposit(userId, money, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getAllUsers(options) {
        return exports.UsersApiFp(this.configuration).getAllUsers(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary getUserById
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserById(userId, options) {
        return exports.UsersApiFp(this.configuration).getUserById(userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary update user profile
     * @param {string} userId
     * @param {UserProfile} [userProfile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUserProfile(userId, userProfile, options) {
        return exports.UsersApiFp(this.configuration).updateUserProfile(userId, userProfile, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.UsersApi = UsersApi;
